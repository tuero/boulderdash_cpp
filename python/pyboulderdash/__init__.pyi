from typing import ClassVar

import numpy
from numpy.typing import NDArray

class RewardCode:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    kRewardAgentDies: ClassVar[RewardCode] = ...
    kRewardCollectDiamond: ClassVar[RewardCode] = ...
    kRewardCollectKey: ClassVar[RewardCode] = ...
    kRewardCollectKeyBlue: ClassVar[RewardCode] = ...
    kRewardCollectKeyGreen: ClassVar[RewardCode] = ...
    kRewardCollectKeyRed: ClassVar[RewardCode] = ...
    kRewardCollectKeyYellow: ClassVar[RewardCode] = ...
    kRewardNutToDiamond: ClassVar[RewardCode] = ...
    kRewardWalkThroughExit: ClassVar[RewardCode] = ...
    kRewardWalkThroughGate: ClassVar[RewardCode] = ...
    kRewardWalkThroughGateBlue: ClassVar[RewardCode] = ...
    kRewardWalkThroughGateGreen: ClassVar[RewardCode] = ...
    kRewardWalkThroughGateRed: ClassVar[RewardCode] = ...
    kRewardWalkThroughGateYellow: ClassVar[RewardCode] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class HiddenCellType:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    kAgent: ClassVar[HiddenCellType] = ...
    kAgentInExit: ClassVar[HiddenCellType] = ...
    kBlob: ClassVar[HiddenCellType] = ...
    kBomb: ClassVar[HiddenCellType] = ...
    kBombFalling: ClassVar[HiddenCellType] = ...
    kButterflyDown: ClassVar[HiddenCellType] = ...
    kButterflyLeft: ClassVar[HiddenCellType] = ...
    kButterflyRight: ClassVar[HiddenCellType] = ...
    kButterflyUp: ClassVar[HiddenCellType] = ...
    kDiamond: ClassVar[HiddenCellType] = ...
    kDiamondFalling: ClassVar[HiddenCellType] = ...
    kDirt: ClassVar[HiddenCellType] = ...
    kEmpty: ClassVar[HiddenCellType] = ...
    kExitClosed: ClassVar[HiddenCellType] = ...
    kExitOpen: ClassVar[HiddenCellType] = ...
    kExplosionBoulder: ClassVar[HiddenCellType] = ...
    kExplosionDiamond: ClassVar[HiddenCellType] = ...
    kExplosionEmpty: ClassVar[HiddenCellType] = ...
    kFireflyDown: ClassVar[HiddenCellType] = ...
    kFireflyLeft: ClassVar[HiddenCellType] = ...
    kFireflyRight: ClassVar[HiddenCellType] = ...
    kFireflyUp: ClassVar[HiddenCellType] = ...
    kGateBlueClosed: ClassVar[HiddenCellType] = ...
    kGateBlueOpen: ClassVar[HiddenCellType] = ...
    kGateGreenClosed: ClassVar[HiddenCellType] = ...
    kGateGreenOpen: ClassVar[HiddenCellType] = ...
    kGateRedClosed: ClassVar[HiddenCellType] = ...
    kGateRedOpen: ClassVar[HiddenCellType] = ...
    kGateYellowClosed: ClassVar[HiddenCellType] = ...
    kGateYellowOpen: ClassVar[HiddenCellType] = ...
    kKeyBlue: ClassVar[HiddenCellType] = ...
    kKeyGreen: ClassVar[HiddenCellType] = ...
    kKeyRed: ClassVar[HiddenCellType] = ...
    kKeyYellow: ClassVar[HiddenCellType] = ...
    kNut: ClassVar[HiddenCellType] = ...
    kNutFalling: ClassVar[HiddenCellType] = ...
    kOrangeDown: ClassVar[HiddenCellType] = ...
    kOrangeLeft: ClassVar[HiddenCellType] = ...
    kOrangeRight: ClassVar[HiddenCellType] = ...
    kOrangeUp: ClassVar[HiddenCellType] = ...
    kPebbleInDirt: ClassVar[HiddenCellType] = ...
    kStone: ClassVar[HiddenCellType] = ...
    kStoneFalling: ClassVar[HiddenCellType] = ...
    kStoneInDirt: ClassVar[HiddenCellType] = ...
    kVoidInDirt: ClassVar[HiddenCellType] = ...
    kWallBrick: ClassVar[HiddenCellType] = ...
    kWallMagicDormant: ClassVar[HiddenCellType] = ...
    kWallMagicExpired: ClassVar[HiddenCellType] = ...
    kWallMagicOn: ClassVar[HiddenCellType] = ...
    kWallSteel: ClassVar[HiddenCellType] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class GameParameters:
    gravity: bool
    magic_wall_steps: int
    blob_chance: int
    blob_max_percentage: float
    disable_explosions: bool
    butterfly_explosion_ver: int
    butterfly_move_ver: int

class BoulderDashGameState:
    name: ClassVar[str] = ...  # read-only
    num_actions: ClassVar[int] = ...  # read-only
    def __init__(self, board_str: str) -> None: ...
    def __copy__(self) -> BoulderDashGameState: ...
    def __deepcopy__(self, arg0: dict) -> BoulderDashGameState: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def apply_action(self, int: int) -> None: ...
    def is_solution(self) -> bool: ...
    def observation_shape(self) -> tuple[int, int, int]: ...
    def get_observation(self) -> NDArray[numpy.float32]: ...
    def image_shape(self) -> tuple[int, int, int]: ...
    def to_image(self) -> NDArray[numpy.uint8]: ...
    def get_reward_signal(self) -> int: ...
    def get_agent_index(self) -> int: ...
    def agent_alive(self) -> bool: ...
    def agent_in_exit(self) -> bool: ...
    def get_hidden_item(self, idx: int) -> HiddenCellType: ...
